_default:
  @just --list --list-heading '' --list-prefix '' --unsorted

# Build the provider
@build:
  go build -ldflags "-X github.com/jd-ucpa/terraform-provider-test/internal.Version=$(cat VERSION)" -o terraform-provider-test

# Install the provider locally
@install: build
  mkdir -p ~/.terraform.d/plugins/registry.terraform.io/jd-ucpa/test/$(cat VERSION)/darwin_arm64
  mv terraform-provider-test ~/.terraform.d/plugins/registry.terraform.io/jd-ucpa/test/$(cat VERSION)/darwin_arm64

# Run tests
@test:
  go test -i ./test || exit 1
  go test ./test -timeout=30s -parallel=4

# Run acceptance tests
@testacc:
  source test/test.env && TF_ACC=1 go test ./test -v -timeout 120m

# Run specific test
# Le flag -run de Go accepte un pattern (expression régulière) et exécute tous les tests dont le nom contient ce pattern.
# Donc just testacc-specific TestAccProvider
# → TestAccProvider_InvalidRegion
@test-specific test_name:
  go test -v ./test -run {{test_name}}

# Run specific acceptance test
@testacc-specific test_name:
  source test/test.env && TF_ACC=1 go test -v ./test -run {{test_name}} -timeout 120m

@example:
  export TF_PLUGIN_CACHE_DIR=$HOME/.terraform.d/plugin-cache && export AWS_PROFILE=9539 && cd example && sed -i '' '/provider "registry.terraform.io\/jd-ucpa\/test" {/,/}/d' .terraform.lock.hcl && terraform init && terraform plan

@apply:
  cd example && export AWS_PROFILE=9539 && terraform init && terraform apply -auto-approve

# Generate documentation using tfplugindocs
@docs:
  ./tfplugindocs generate

# Clean and regenerate documentation
@docs-clean:
  rm -rf docs/
  ./tfplugindocs generate

# Afficher la version actuelle
@version:
  cat VERSION

# Mettre à jour la version
@set-version version:
  echo "{{version}}" > VERSION
  echo "Version mise à jour: {{version}}"

@full: build install example apply

# Generate documentation and add examples manually
@docs-with-examples:
  ./tfplugindocs generate
  # Supprimer les fichiers templates inutiles
  rm -f docs/data-source.md docs/provider.md docs/resource.md
  # Créer un fichier temporaire pour la ressource SSM Send Command avec exemples au bon endroit
  awk '/<!-- schema generated by tfplugindocs -->/ { \
    print "## Example Usage"; \
    print ""; \
    print "### Basic Usage"; \
    print ""; \
    print "```hcl"; \
    system("cat examples/ssm_send_command.tf"); \
    print "```"; \
    print ""; \
    print "### Using Targets"; \
    print ""; \
    print "```hcl"; \
    system("cat examples/ssm_send_command_targets.tf"); \
    print "```"; \
    print ""; \
    print $0; \
    next; \
  } { print }' docs/resources/ssm_send_command.md > docs/resources/ssm_send_command.md.tmp && mv docs/resources/ssm_send_command.md.tmp docs/resources/ssm_send_command.md
  # Restructurer le schema en sections séparées pour la ressource SSM Send Command
  # D'abord remplacer le titre principal
  sed -i '' 's/## Schema/## Argument Reference\n\nThe following arguments are supported:\n/' docs/resources/ssm_send_command.md
  # Ensuite traiter les blocs imbriqués AVANT les attributs read-only
  sed -i '' 's/<a id="nestedblock--targets"><\/a>/\n## Nested Blocks\n\n### targets\n\nThe `targets` block supports:\n/' docs/resources/ssm_send_command.md
  sed -i '' 's/### Nested Schema for `targets`//' docs/resources/ssm_send_command.md
  # Enfin traiter les attributs read-only (qui viennent après dans le fichier)
  sed -i '' 's/### Read-Only/\n## Attributes Reference\n\nIn addition to all arguments above, the following attributes are exported:\n\n### Read-Only/' docs/resources/ssm_send_command.md
  # Réorganiser pour que Nested Blocks soit avant Attributes Reference
  python3 scripts/reorder_docs.py docs/resources/ssm_send_command.md
  # Créer un fichier temporaire pour le data source Caller Identity avec exemples au bon endroit
  awk '/<!-- schema generated by tfplugindocs -->/ { \
    print "## Example Usage"; \
    print ""; \
    print "```hcl"; \
    system("cat examples/caller_identity.tf"); \
    print "```"; \
    print ""; \
    print $0; \
    next; \
  } { print }' docs/data-sources/caller_identity.md > docs/data-sources/caller_identity.md.tmp && mv docs/data-sources/caller_identity.md.tmp docs/data-sources/caller_identity.md
  # Ajouter un exemple simple dans index.md avec la version du fichier VERSION
  ./scripts/add_version_to_docs.sh
  # Restructurer le schema en sections séparées pour le data source Caller Identity
  awk '/## Schema/ { \
    print "## Argument Reference"; \
    print ""; \
    print "This data source does not support any arguments."; \
    print ""; \
    print "## Attributes Reference"; \
    print ""; \
    print "The following attributes are exported:"; \
    print ""; \
    next; \
  } \
  /### Read-Only/ { \
    print "### Read-Only"; \
    next; \
  } \
  { print }' docs/data-sources/caller_identity.md > docs/data-sources/caller_identity.md.tmp && mv docs/data-sources/caller_identity.md.tmp docs/data-sources/caller_identity.md


